{"version":3,"sources":["login/Login.js","Register/Register.js","Navigation/Navigation.js","API/getInfo.js","Message/Message.js","WriteMessage/WriteMessage.js","Book/Book.js","MessageDetails/MessageDetails.js","app/App.js","serviceWorker.js","index.js"],"names":["Login","props","handleLogin","getUserInfo","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","status","console","log","warning","document","getElementById","style","display","innerText","color","Error","json","data","setState","authorized","name","catch","err","this","to","Container","width","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","Button","variant","onClick","Component","Register","handleRegister","length","includes","accepted","Navigation","resetState","authenticated","Row","marginRight","Col","md","className","Card","Title","getMessage","messageId","id","resp","jsonResp","getMessageOwner","userId","Message","reply","details","messageInfo","_id","content","replies","redirect","delete","res","jsonres","refresh","edit","editMode","owner","Body","Text","as","rows","WriteMessage","handleMessage","message","updateMessage","Book","jsonResponse","messages","window","scrollTo","scrollHeight","map","MessageDetails","updateReplies","user","concat","currentUserEmail","messageDetails","span","offset","initialState","App","exact","path","textAlign","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b1411211.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Form, Button, Container } from 'react-bootstrap'\r\nimport {Redirect } from \"react-router-dom\";\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      authorized: false\r\n    }\r\n  }\r\n\r\n  handleLogin = () => {\r\n    const { getUserInfo } = this.props\r\n    fetch('http://localhost:5000/login',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body:\r\n          JSON.stringify({\r\n            email: this.state.email,\r\n            password: this.state.password\r\n          })\r\n      }\r\n    )\r\n      .then(response => {\r\n        \r\n        if (response.status !== 200) {\r\n          console.log(response)\r\n          var warning = document.getElementById('warning')\r\n          warning.style.display = \"block\"\r\n          warning.innerText = 'Invalid email or password'\r\n          warning.style.color = 'red'\r\n          throw Error\r\n        }\r\n        return response.json()\r\n      }\r\n      )\r\n      .then(data => {\r\n        this.setState({authorized: true})\r\n        getUserInfo(data.name, data.email)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n  render() {\r\n    if(this.state.authorized){\r\n        return <Redirect to='/home'/>\r\n    }\r\n    else{\r\n\r\n      return (\r\n        <Container style={{ width: \"30%\" }}>\r\n          <div>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control type=\"email\" placeholder=\"Enter email\" value={this.state.email} onChange={(e) => {\r\n                this.setState({ email: e.target.value })\r\n              }} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={(e) => {\r\n                this.setState({ password: e.target.value })\r\n              }} />\r\n            </Form.Group>\r\n            {\r\n                <Button variant=\"primary\" type=\"button\" onClick={this.handleLogin}>\r\n                  Sign in\r\n                 </Button>\r\n            }\r\n          </div >\r\n        </Container >\r\n      )\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Form, Button, Container } from 'react-bootstrap'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport './Register.css'\r\nexport default class Register extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      accepted: false\r\n    }\r\n\r\n  }\r\n\r\n  handleRegister = () => {\r\n    const { getUserInfo } = this.props\r\n    if (this.state.name.length && this.state.email.includes('@') && this.state.password.length) {\r\n      fetch('http://localhost:5000/register',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body:\r\n            JSON.stringify({\r\n              name: this.state.name,\r\n              email: this.state.email,\r\n              password: this.state.password\r\n            })\r\n\r\n        }\r\n      )\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if (data) {\r\n            console.log(data)\r\n            getUserInfo(data.name, data.email)\r\n            this.setState({ accepted: true })\r\n          }\r\n          else if (data === 'email already exists') {\r\n            var warning = document.getElementById('warning')\r\n            warning.style.display = \"block\"\r\n            warning.innerText = 'email already exists'\r\n            warning.style.color = 'red'\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ accepted: false })\r\n        })\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.accepted) {\r\n      return <Redirect to='/home' />\r\n    }\r\n    return (\r\n      <Container style={{ width: \"30%\" }}>\r\n        <div>\r\n          <Form.Group controlId=\"name\">\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Enter Name\" value={this.state.name} onChange={(e) => {\r\n              this.setState({ name: e.target.value })\r\n            }} />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"Enter email\" value={this.state.email} onChange={(e) => {\r\n              this.setState({ email: e.target.value })\r\n            }} />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={(e) => {\r\n              this.setState({ password: e.target.value })\r\n            }} />\r\n          </Form.Group>\r\n\r\n\r\n          <Button variant=\"primary\" type=\"submit\" onClick={this.handleRegister}>\r\n            Register\r\n            </Button>\r\n\r\n        </div>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Col, Row, Card } from 'react-bootstrap'\r\nimport { Link } from \"react-router-dom\";\r\nimport './Navigation.css'\r\nexport default function Navigation({ resetState, authenticated, name, email }) {\r\n\r\n  if (authenticated)\r\n    return (\r\n      <Row style={{ marginRight: \"0px\" }}>\r\n        <Col md=\"4\" className=\"userInfo\">\r\n          <Card className=\"userCard\">\r\n            <Card.Title>\r\n              <h4>{name}</h4>\r\n              <h5>{email}</h5>\r\n            </Card.Title>\r\n          </Card>\r\n        </Col>\r\n        <Col className='Navigation'>\r\n          <Link to=\"/\">\r\n            <Button variant=\"light\" onClick={() => resetState()} >Sign Out</Button>\r\n          </Link>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  else {\r\n    return (\r\n      <Col className='Navigation'>\r\n        <Link className=\"sign\" to=\"/\">\r\n          <Button variant=\"light\">Login</Button>\r\n        </Link>\r\n        <Link className=\"sign\" to=\"/Register\">\r\n          <Button variant=\"light\">Register</Button>\r\n        </Link>\r\n      </Col>\r\n    )\r\n  }\r\n\r\n}\r\n","export const getMessage = (messageId) => {\r\n  return fetch('http://localhost:5000/getmessage',\r\n  {\r\n    method: 'post',\r\n    headers: {\"content-type\": \"application/json\"},\r\n    body: JSON.stringify({\r\n     id: messageId\r\n    })\r\n  })\r\n  .then(resp => resp.json())\r\n  .then(jsonResp => jsonResp)\r\n}\r\n\r\n\r\nexport const getMessageOwner = (userId) => {\r\n  return fetch('http://localhost:5000/user',\r\n  {\r\n    method: 'post',\r\n    headers: {\"content-type\": \"application/json\"},\r\n    body: JSON.stringify({\r\n     id: userId\r\n    })\r\n  })\r\n  .then(resp => resp.json())\r\n}","import React, { Component } from 'react'\r\nimport { Card, Button, Col, Row, Form } from 'react-bootstrap'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { getMessageOwner } from '../API/getInfo'\r\nimport './Message.css'\r\nexport default class Message extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      content: '',\r\n      redirect: false,\r\n      owner: false,\r\n      editMode: false\r\n    }\r\n  }\r\n\r\n  reply = () => {\r\n    const details = {\r\n      messageId: this.props.messageInfo._id,\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      content: this.state.content,\r\n      replies: this.props.messageInfo.replies\r\n    }\r\n    this.props.getMessage(details)\r\n    this.setState({ redirect: true })\r\n  }\r\n\r\n  delete = () => {\r\n    fetch('http://localhost:5000/delete', {\r\n      method: 'delete',\r\n      headers: { \"content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        id: this.props.messageInfo._id\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(jsonres => {\r\n        this.props.refresh()\r\n      })\r\n  }\r\n\r\n  edit = (e) => {\r\n    if (e.target.innerText === 'Save') {\r\n      this.setState({ editMode: false }, () => {\r\n        fetch('http://localhost:5000/editmessage', {\r\n          method: 'post',\r\n          headers: { \"content-type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            id: this.props.messageInfo._id,\r\n            content: this.state.content\r\n          })\r\n        })\r\n          .then(res => res.json())\r\n          .then(() => {\r\n            this.props.refresh()\r\n          })\r\n      })\r\n      e.target.innerText = 'Edit'\r\n    }\r\n    else {\r\n      e.target.innerText = 'Save'\r\n      this.setState({ editMode: true })\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    getMessageOwner(this.props.messageInfo.owner)\r\n      .then(jsonResp => {\r\n        this.setState({ name: jsonResp.name, email: jsonResp.email,\r\n           content: this.props.messageInfo.content, owner:  jsonResp.email === this.props.email})\r\n      })\r\n  }\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/message\" />\r\n    }\r\n    else {\r\n      return (\r\n        <Card className=\"message\">\r\n          <Card.Body>\r\n            <Card.Title>\r\n              <h4>{this.state.name}</h4>\r\n              <h6>{this.state.email}</h6>\r\n            </Card.Title>\r\n            {\r\n              !this.state.editMode && <Card.Text className=\"content\">\r\n                {this.state.content}\r\n              </Card.Text>\r\n            }\r\n            {\r\n              this.state.editMode &&\r\n              <Form.Control as=\"textarea\" rows=\"2\" value={this.state.content} className=\"content\"\r\n                onChange={(e) => this.setState({ content: e.target.value })} />\r\n            }\r\n            <Row>\r\n              <Col>\r\n                <Button variant=\"primary\" onClick={this.reply}>Reply</Button>\r\n              </Col>\r\n              {this.state.owner && <Col className=\"editable\">\r\n                <Button className=\"\" variant=\"primary\" onClick={this.edit}>Edit</Button>\r\n                <Button className=\"\" variant=\"primary\" onClick={this.delete}>Delete</Button>\r\n              </Col>}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      )\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Form, Button, Container} from 'react-bootstrap'\r\nimport './writeMessage.css'\r\nexport default class WriteMessage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      message: ''\r\n    }\r\n  }\r\n  handleMessage = (reply) => {\r\n    if(reply){\r\n      fetch('http://localhost:5000/reply',\r\n      {\r\n        method: 'post',\r\n        headers: {\"content-type\": \"application/json\"},\r\n        body: JSON.stringify({\r\n          email: this.props.email,\r\n          content: this.state.message,\r\n          messageId: this.props.messageId\r\n        })\r\n      })\r\n      .then(res => res.json())\r\n      .then(message => this.props.updateMessage(message))\r\n      .then(this.setState({message: ''}))\r\n    }\r\n\r\n    else{\r\n      fetch('http://localhost:5000/message',\r\n      {\r\n        method: 'post',\r\n        headers: {\"content-type\": \"application/json\"},\r\n        body: JSON.stringify({\r\n          email: this.props.email,\r\n          content: this.state.message\r\n        })\r\n      })\r\n      .then( () => {\r\n        this.props.refresh()\r\n        \r\n      }\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {reply} = this.props\r\n    return (\r\n      <Container className=\"messageBox\">\r\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n          <Form.Control as=\"textarea\" rows=\"3\" value={this.state.message} onChange={ (e) =>\r\n             {this.setState({message: e.target.value})}}/>\r\n        </Form.Group>\r\n        <Button onClick={() => this.handleMessage(reply)}>\r\n          Write Message\r\n        </Button>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Message from '../Message/Message'\r\nimport WriteMessage from '../WriteMessage/WriteMessage'\r\nexport default class Book extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      messages: [],\r\n      refresh: false\r\n    }\r\n  }\r\n  \r\n  refresh = () => {\r\n    console.log('refresh', this.state.refresh)\r\n    fetch('http://localhost:5000/book',\r\n    {\r\n      method: 'get',\r\n      headers: \r\n      {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(jsonResponse => this.setState({messages: jsonResponse, refresh: ! this.state.refresh}))\r\n    .then( () => window.scrollTo(0,document.body.scrollHeight))\r\n  }\r\n  \r\n  componentWillMount(){\r\n    fetch('http://localhost:5000/book',\r\n    {\r\n      method: 'get',\r\n      headers: \r\n      {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(jsonResponse => this.setState({messages: jsonResponse, refresh: false}))\r\n  }\r\n  render() {\r\n      return (\r\n        <div>\r\n          <WriteMessage refresh={this.refresh} reply={false} email={this.props.email}/>\r\n          {this.state.messages.map( message => {\r\n          return <Message email={this.props.email}  refresh={this.refresh} messageInfo={message} getMessage={this.props.getMessage}/>        })}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Col, Card, Button, Container } from 'react-bootstrap'\r\nimport { getMessage, getMessageOwner } from '../API/getInfo'\r\nimport WriteMessage from '../WriteMessage/WriteMessage';\r\nimport './MessageDetails.css'\r\nexport default class MessageDetails extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      messageId: '',\r\n      name: '',\r\n      email: '',\r\n      currentUserEmail: '',\r\n      message: {},\r\n      replies: []\r\n    }\r\n  }\r\n\r\n  updateReplies = (reply) => {\r\n      getMessage(reply)\r\n        .then(message => {\r\n          getMessageOwner(message.owner)\r\n            .then((user) => {\r\n              this.setState({ replies: this.state.replies.concat([{ name: user.name, email: user.email, content: message.content }]) })\r\n            })})\r\n  }\r\n  componentWillMount() {\r\n    this.setState({\r\n      messageId: this.props.messageDetails.messageId, currentUserEmail: this.props.email\r\n      , name: this.props.messageDetails.name, email: this.props.messageDetails.email\r\n    }, () =>\r\n      getMessage(this.state.messageId)\r\n        .then(message => {\r\n          this.setState({ message: message })\r\n        })\r\n        .then(() => {\r\n          this.state.message.replies.map(reply => {\r\n            this.updateReplies(reply)\r\n          })\r\n        })\r\n    )\r\n\r\n  }\r\n\r\n  updateMessage = (message) => {\r\n    this.setState({ message: message}, () => {\r\n      const reply = message.replies[message.replies.length -1]\r\n      this.updateReplies(reply)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Col>\r\n          <Card className=\"message\">\r\n            <Card.Body>\r\n              <Card.Title>\r\n                <h4>{this.state.name}</h4>\r\n                <h5>{this.state.email}</h5>\r\n              </Card.Title>\r\n              <Card.Text className=\"content\">\r\n                {this.state.message.content}\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        {this.state.replies.map(reply => {\r\n          return <Col md={{ span: 8, offset: 3 }}>\r\n            <Card className=\"reply-message\">\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  <h4>{reply.name}</h4>\r\n                  <h5>{reply.email}</h5>\r\n                </Card.Title>\r\n                <Card.Text className=\"content\">\r\n                  {reply.content}\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        })}\r\n        <Col md={{ span: 8, offset: 3 }}>\r\n          <WriteMessage updateMessage={this.updateMessage} messageId={this.state.messageId} reply={true} email={this.state.currentUserEmail} />\r\n        </Col>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Login from '../login/Login'\nimport Register from '../Register/Register'\nimport Navigation from '../Navigation/Navigation'\nimport Book from '../Book/Book'\nimport MessageDetails from '../MessageDetails/MessageDetails'\n\nimport './App.css'\n\nconst initialState = {\n  name: '',\n  email: '',\n  authenticated: false,\n  messageDetails: {}\n}\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state = initialState\n  }\n\n  resetState = () => {\n    this.setState(initialState)\n  }\n\n  getUserInfo = (name, email) => {\n    this.setState({ name: name, email: email, authenticated: true })\n  }\n  getMessage = (message) => {\n    this.setState({messageDetails: message})\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n\n        <Navigation resetState={this.resetState} authenticated={this.state.authenticated}\n         name={this.state.name} email={this.state.email}/>\n        <Route exact path=\"/\">\n          <div className=\"login-page\">\n            <Login className=\"login-form\" getUserInfo={this.getUserInfo} />\n            <div style={{ display: 'none', textAlign: 'center' }} id=\"warning\"></div>\n          </div>\n        </Route>\n\n        <Route path=\"/register\">\n          <Register getUserInfo={this.getUserInfo} />\n          <div style={{ display: 'none', textAlign: 'center' }} id=\"warning\"></div>\n        </Route>\n\n        <Route path=\"/home\">\n          <Book email={this.state.email} getMessage = {this.getMessage}/>\n        </Route>\n\n        <Route path=\"/message\">\n          <MessageDetails email={this.state.email} messageDetails={this.state.messageDetails}/>\n        </Route>\n\n      </BrowserRouter>\n\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}